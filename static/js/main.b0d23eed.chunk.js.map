{"version":3,"sources":["components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactList/ContactList.js","App.js","index.js"],"names":["AddContactButton","styled","button","InputValue","input","ContactForm","props","useState","name","setName","number","setNumber","handleChange","event","target","value","reset","onSubmit","preventDefault","onAddContact","type","onChange","pattern","title","required","Filter","onChangeFilter","e","DeleteContactButton","ContactList","contacts","onDeleteButtonClick","map","id","onClick","Global","createGlobalStyle","PhoneBookContainer","div","App","JSON","parse","window","localStorage","getItem","setContacts","filter","setFilter","useEffect","setItem","stringify","getFilteredContacts","normalizedFilter","toLowerCase","contact","includes","FilteredContacts","some","toast","error","state","nanoid","length","idToDel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b0d23eed.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { useState } from 'react';\n\nconst AddContactButton = styled.button`\n   {\n    padding: 5px 30px;\n    margin: 10px;\n    border: 1px solid #ccc;\n    border-radius: 10%;\n    box-shadow: 0px 4px 10px 2px rgba(black, 0.2);\n    font-weight: bold;\n    color: #00ff00;\n    cursor: pointer;\n  }\n`;\nconst InputValue = styled.input`\n   {\n    padding: 5px;\n    margin: 10px;\n    background-color: #efefef;\n    border-color: #cccccc;\n  }\n`;\n\nexport default function ContactForm(props) {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    props.onAddContact({ name, number });\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label>\n        Name:&nbsp;&nbsp;&nbsp;\n        <InputValue\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={handleChange}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </label>\n      <br />\n      <label>\n        Number:\n        <InputValue\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          onChange={handleChange}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </label>\n      <br />\n\n      <AddContactButton type=\"submit\">Add contact</AddContactButton>\n    </form>\n  );\n}\n\nContactForm.propTypes = {\n  onAddContact: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst InputValue = styled.input`\n   {\n    padding: 5px;\n    margin: 10px;\n    background-color: #efefef;\n    border-color: #cccccc;\n  }\n`;\n\nexport default function Filter({ value, onChangeFilter }) {\n  return (\n    <label>\n      <i>Find contacts by name</i>\n      <InputValue\n        type=\"text\"\n        value={value}\n        onChange={e => onChangeFilter(e.target.value)}\n      />\n    </label>\n  );\n}\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChangeFilter: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst DeleteContactButton = styled.button`\n   {\n    padding: 5px 20px;\n    margin: 10px;\n    border: 1px solid #ccc;\n    border-radius: 10%;\n    box-shadow: 0px 4px 10px 2px rgba(black, 0.2);\n    color: #ff0000;\n    border-color: #cccccc;\n    cursor: pointer;\n  }\n`;\n\nconst ContactList = ({ contacts, onDeleteButtonClick }) => {\n  return (\n    <ul>\n      {contacts.map(({ id, name, number }) => (\n        <li key={id}>\n          {name}: {number}\n          <DeleteContactButton\n            type=\"button\"\n            name=\"delete\"\n            onClick={() => onDeleteButtonClick({ id })}\n          >\n            Delete\n          </DeleteContactButton>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n      id: PropTypes.string.isRequired,\n    }),\n  ),\n\n  onDeleteButtonClick: PropTypes.func.isRequired,\n};\n\nexport default ContactList;\n","import { useState, useEffect } from 'react';\nimport { nanoid } from 'nanoid';\nimport styled, { createGlobalStyle } from 'styled-components';\nimport toast, { Toaster } from 'react-hot-toast';\nimport ContactForm from './components/ContactForm/ContactForm';\nimport Filter from './components/Filter/Filter';\nimport ContactList from './components/ContactList/ContactList';\n\nconst Global = createGlobalStyle`\n*{\n  margin: 0px;\n  padding: 0px;\n  box-sizing: border-box;\n}\n\nbody {\n  font-family: Arial, Helvetica, sans-serif;\n  font-size: 20px;\n}\n\nh1, h2{ \nmargin: 10px;\n}\n`;\n\nconst PhoneBookContainer = styled.div`\n   {\n    width: 100%;\n  }\n`;\n\nexport default function App() {\n  const [contacts, setContacts] = useState(() => {\n    return JSON.parse(window.localStorage.getItem('contacts')) ?? [];\n  });\n\n  const [filter, setFilter] = useState('');\n\n  useEffect(() => {\n    window.localStorage.setItem('contacts', JSON.stringify(contacts));\n  }, [contacts]);\n\n  const updateStateContact = ({ name, number }) => {\n    const result = contacts.some(\n      contact => contact.name.toLowerCase() === name.toLowerCase(),\n    );\n\n    if (result) {\n      toast.error('This Name is already exists !');\n      return;\n    }\n\n    setContacts(state => [...state, { id: nanoid(5), name, number }]);\n  };\n\n  const updateStateFilter = filter => {\n    setFilter(filter);\n\n    getFilteredContacts();\n  };\n\n  const getFilteredContacts = () => {\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n  };\n\n  const deleteContactById = id => {\n    const { id: idToDel } = id;\n\n    setContacts(contacts.filter(({ id }) => id !== idToDel));\n  };\n\n  const FilteredContacts = getFilteredContacts();\n\n  return (\n    <>\n      <Global />\n      <PhoneBookContainer>\n        <Toaster />\n        <h1>Phonebook</h1>\n        <ContactForm onAddContact={updateStateContact} />\n        <h2>Contacts</h2>\n\n        {contacts.length > 0 && (\n          <Filter value={filter} onChangeFilter={updateStateFilter} />\n        )}\n\n        {contacts.length > 0 ? (\n          <ContactList\n            contacts={FilteredContacts}\n            onDeleteButtonClick={deleteContactById}\n          />\n        ) : (\n          <p>Your phonebook is empty</p>\n        )}\n      </PhoneBookContainer>\n    </>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}